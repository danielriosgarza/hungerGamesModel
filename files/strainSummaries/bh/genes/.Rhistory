n_species = 5,
migration_p = 1,
metacommunity_probability = c(0.1, 0.15, 0.2, 0.25, 0.3),
t_end = 20,
t_store = 200)
makePlot(ExampleHubbellRates$matrix)
ExampleHubbellRates <- simulateHubbellRates(
n_species = 5,
migration_p = 1,
metacommunity_probability = c(0.1, 0.1, 0.2, 0.2, 0.4),
t_end = 20,
t_store = 200)
makePlot(ExampleHubbellRates$matrix)
ExampleHubbellRates <- simulateHubbellRates(n_species = 5, migration_p = 0)
makePlot(ExampleHubbellRates$matrix)
miaSimShiny::run_app()
set.seed(42)
ExampleLogistic <- simulateStochasticLogistic(
n_species = 5,
stochastic = FALSE
)
makePlot(ExampleLogistic$matrix)
set.seed(42)
ExampleLogistic <- simulateStochasticLogistic(
n_species = 5,
stochastic = FALSE,
death_rates=rep(0,5)
)
makePlot(ExampleLogistic$matrix)
set.seed(42)
ExampleLogistic <- simulateStochasticLogistic(
n_species = 5,
stochastic = FALSE,
death_rates=rep(0,5),
growth_rates = seq(0.1, 0.5, 0.1),
death_rates = seq(0.001, 0.0002, -0.0002),
carrying_capacities = seq(1000, 1800, 200)
)
set.seed(42)
ExampleLogistic <- simulateStochasticLogistic(
n_species = 5,
stochastic = FALSE,
growth_rates = seq(0.1, 0.5, 0.1),
death_rates = seq(0.001, 0.0002, -0.0002),
carrying_capacities = seq(1000, 1800, 200)
)
makePlot(ExampleLogistic$matrix)
set.seed(42)
ExampleLogistic <- simulateStochasticLogistic(
n_species = 5,
stochastic = FALSE,
death_rates=rep(0,5),
growth_rates = seq(0.1, 0.5, 0.1),
death_rates = seq(0.001, 0.0002, -0.0002),
carrying_capacities = seq(1000, 1800, 200),
error_variance = 500,
norm = TRUE
)
set.seed(42)
ExampleLogistic <- simulateStochasticLogistic(
n_species = 5,
stochastic = FALSE,
growth_rates = seq(0.1, 0.5, 0.1),
death_rates = seq(0.001, 0.0002, -0.0002),
carrying_capacities = seq(1000, 1800, 200),
error_variance = 500,
norm = TRUE
)
makePlot(ExampleLogistic$matrix)
miaSimShiny::run_app()
glvExample5 <- function(n_species, alpha) {
ExampleA <- randomA(
n_species = n_species,
diagonal = -1,
connectance = 1,
mutualism = 0,
commensalism = 0,
parasitism = 0,
amensalism = 0,
interactions = runif(n_species^2, 0, 2*alpha),
scale_off_diagonal = 1)
makeHeatmap(ExampleA, title = "interspecies interactions matrix")
ExampleGLV <- simulateGLV(
n_species = n_species,
A = ExampleA,
x0 = rep(0.1,n_species),
stochastic = FALSE,
migration_p = 1,
sigma_migration = 0.01,
growth_rates = 1-2*alpha,
t_step = 1)
makePlot(ExampleGLV$matrix) + scale_y_log10(limits = c(1E-8, 1))
finalValues <- ExampleGLV$matrix[1000,seq_len(n_species)]
survivalFraction <- sum(finalValues > 1E-3)/n_species
print(paste("Survival fraction =", survivalFraction))
maxValues <- apply(X = ExampleGLV$matrix[,seq_len(n_species)], MARGIN = 2, FUN = max)
minValues <- apply(X = ExampleGLV$matrix[,seq_len(n_species)], MARGIN = 2, FUN = min)
# fluctuationFraction <- sum(maxValues / minValues > 1E4) / n_species
fluctuationFraction <- sum(maxValues / finalValues > 1E4) / n_species
print(paste("Fluctuation fraction =", fluctuationFraction))
return(list(A = ExampleA, GLV = ExampleGLV, survivalFraction, fluctuationFraction))
}
# replicate the fig1a
EX5.1 <- glvExample5(n_species = 4, alpha = 0.3)
makePlot(EX5.1$GLV$matrix) + scale_y_log10(limits = c(1E-8, 1))
EX5.2 <- glvExample5(n_species = 20, alpha = 0.3)
makePlot(EX5.2$GLV$matrix) + scale_y_log10(limits = c(1E-8, 1))
EX5.3 <- glvExample5(n_species = 50, alpha = 0.3)
makePlot(EX5.3$GLV$matrix) + scale_y_log10(limits = c(1E-8, 1))
# replicate the fig1b
EX5.4 <- glvExample5(n_species = 50, alpha = 0.08)
makePlot(EX5.4$GLV$matrix) + scale_y_log10(limits = c(1E-8, 1))
EX5.5 <- glvExample5(n_species = 50, alpha = 0.16)
makePlot(EX5.5$GLV$matrix) + scale_y_log10(limits = c(1E-8, 1))
EX5.6 <- glvExample5(n_species = 50, alpha = 0.64)
makePlot(EX5.6$GLV$matrix) + scale_y_log10(limits = c(1E-8, 1))
miaSimShiny::run_app()
n_species <- 5
n_resources <- 5
#simulate the model
CRMsimul <- simulateConsumerResource(n_species = n_species, n_resources = n_resources)
#visualize the result
makePlot(CRMsimul$matrix) #species plot
makePlot(CRMsimul$resources,title = "quantity of compounds by time", obj = 'resources', y.label = 's.t') #resources plot
#generate the matrix E
E = randomE(n_species = n_species, n_resources = n_resources)
print(E)
#positive entries are consumed, negative produced, zero has no influence on the species
#define some simulation parameters
t_end = 2000 #when to stop
t_store = 500 #how many samples of the simulation to store (evenly spaced)
migration_p = 0 #whether to allow migration from a metacommunity
stochastic = 0 # whether to use noise in the simulation
resources = rep(20, 5) #define the starting resource concentration
#simulate the model
CRMsimul <- simulateConsumerResource(n_species = n_species, n_resources = n_resources, resources = resources, stochastic = stochastic, migration_p = migration_p, E=E, t_end = t_end, t_store = t_store)
#visualize the result
makePlot(CRMsimul$matrix) #species plot
makePlot(CRMsimul$resources,title = "quantity of compounds by time", obj = 'resources', y.label = 's.t') #resources plot
#batch operation mode
#outflow = inflow = 0
volume = 1000
inflow_rate = 0
outflow_rate = 0
#simulate the model
CRMsimul_batch <- simulateConsumerResource(n_species = n_species, n_resources = n_resources, resources = resources, stochastic = stochastic, migration_p = migration_p, E=E, t_end = t_end, t_store = t_store, inflow_rate = inflow_rate, outflow_rate = outflow_rate)
makePlot(CRMsimul$matrix) #species plot
makePlot(CRMsimul$resources,title = "quantity of compounds by time", obj = 'resources', y.label = 's.t') #resources plot
CRMsimul_batch <- simulateConsumerResource(n_species = n_species, n_resources = n_resources, resources = resources, stochastic = stochastic, migration_p = migration_p, E=E, t_end = t_end, t_store = t_store, inflow_rate = inflow_rate, outflow_rate = outflow_rate)
makePlot(CRMsimul_batch$matrix) #species plot
makePlot(CRMsimul_batch$resources,title = "quantity of compounds by time", obj = 'resources', y.label = 's.t') #resources plot
#fed-batch operation mode
#outflow = 0; inflow>0
inflow_rate = 1
CRMsimul_fedbatch <- simulateConsumerResource(n_species = n_species, n_resources = n_resources, resources = resources, stochastic = stochastic, migration_p = migration_p, E=E, t_end = t_end, t_store = t_store, inflow_rate = inflow_rate, outflow_rate = outflow_rate)
#chemostat
#outflow = inflow > 0
outflow_rate = 1
CRMsimul_chemostat <- simulateConsumerResource(n_species = n_species, n_resources = n_resources, resources = resources, stochastic = stochastic, migration_p = migration_p, E=E, t_end = t_end, t_store = t_store, inflow_rate = inflow_rate, outflow_rate = outflow_rate)
#visualize the result
makePlot(CRMsimul_batch$matrix, title = 'batch_bacteria')
makePlot(CRMsimul_batch$resources, title = 'batch_resources', obj = 'resources', y.label = 's.t')
makePlot(CRMsimul_batch$volume, title = 'batch_volume', obj = 'volume', y.label = 'volume.t')
makePlot(CRMsimul_fedbatch$matrix, title = 'fedbatch_bacteria')
makePlot(CRMsimul_fedbatch$resources, title = 'fedbatch_resources', obj = 'resources', y.label = 's.t')
makePlot(CRMsimul_fedbatch$volume, title = 'fedbatch_volume', obj = 'volume', y.label = 'volume.t')
makePlot(CRMsimul_chemostat$matrix, title = 'chemostat_bacteria')
makePlot(CRMsimul_chemostat$resources, title = 'chemostat_resources', obj = 'resources', y.label = 's.t')
makePlot(CRMsimul_chemostat$volume, title = 'chemostat_volume', obj = 'volume', y.label = 'volume.t')
t.interval = 480 #each unit is 1/10 of an hour
p = 0.1 #fraction of dilution
volume = 1000 #constant volume
inflow_rate = 0
outflow_rate = 0
t_start = 0
t_end = t_start + t.interval
t_store = 100
resources = rep(20, 5)
x0 = rep(5,5)
#initial community
CRMsimul <- simulateConsumerResource(n_species = n_species, x0 = x0, n_resources = n_resources, resources = resources, stochastic = stochastic, migration_p = migration_p, E=E, t_end = t_end, t_store = t_store)
speciesSimul = CRMsimul$matrix
resourcesSimul = CRMsimul$resources
for (i in 1:20){
t_start = t_end
t_end = t_start + t.interval
current_resources = as.vector(tail(CRMsimul$resources,1))[-n_resources-1]
current_bacteria = as.vector(tail(CRMsimul$matrix,1))[-n_species-1]
new_resources = resources + (p*volume/(volume-p*volume))*(current_resources-resources)
new_bacteria = (p*volume/(volume-p*volume))*current_bacteria
CRMsimul <- simulateConsumerResource(n_species = n_species, x0 = new_bacteria, n_resources = n_resources, resources = new_resources, stochastic = stochastic, migration_p = migration_p, E=E, t_start = t_start, t_end = t_end, t_store = t_store)
speciesSimul = rbind(speciesSimul, CRMsimul$matrix)
resourcesSimul = rbind(resourcesSimul, CRMsimul$resources)
}
#visualize the result
makePlot(speciesSimul) #species plot
makePlot(resourcesSimul,title = "quantity of compounds by time", obj = 'resources', y.label = 's.t') #resources plot
E = randomE(n_species = 1, n_resources = 10, maintenance = .1)
print(sum(E*(E>0))) #consumed. For simplicity, values are normalized to add to 1
print(abs(sum(E*(E<0)))) #produced
#The stoichiometric matrix
D = matrix(c(1, -3, 0, 0, 1, 0, -2, 0, 0, 0, 4, -3), nrow = 3, byrow = TRUE)
yields = c(4.3/4, 2/4, 1/4)
E = D*yields
#growth rates
grs <- c(2, 4.5, 2.6)
#initial species composition
x0 <- c(1, 2, 1)
#initial media composition
resources <- c(10, 0, 0, 0)
#simulate the model
CRMsimul <- simulateConsumerResource(n_species = 3, n_resources = 4, stochastic = 0, migration_p = 0.0, E=E,inflow_rate = .1, outflow_rate = .1,resources = resources, names_species = c('homoacetogenic', 'homofermentative', 'butyrateProducer'), names_resources = c('glucose', 'acetate', 'lactate', 'butyrate'), x0=x0, t_end = 500, growth_rates = grs)
#visualize the result
makePlot(CRMsimul$matrix) #species plot
makePlot(CRMsimul$resources,title = "quantity of compounds by time", obj = 'resources', y.label = 's.t') #resources plot
E = randomE(n_species = 10, n_resources = 7, mean_consumption = 5, mean_production = 0, maintenance = 0, trophic_preferences = list(c(25,15,10,1,1,1,1)), names_resources = c('glucose', 'lactose', 'arabinose', 'xylose', 'sorbitol', 'rhamnose', 'ribose') )
#visualize the matrix
makeHeatmap(E)
E = randomE(n_species = 20, n_resources = 20, mean_consumption = 3, mean_production = 2, maintenance = 0.0, trophic_levels = c(5, 5, 10))
#visualize the matrix
makeHeatmap(E)
#visualize the sum of trophic preferences by level
Ep1 <- E[0:5,]
Ep2 <- E[5:10,]
Ep3 <- E[10:20,]
level1<- t(cbind(colSums(Ep1*(Ep1<0)), colSums(Ep2*(Ep2>0))))
level2<- t(cbind(colSums(Ep2*(Ep2<0)), colSums(Ep3*(Ep3>0))))
makeHeatmap(level1, title = 'Trophic level 1', y.label = 'levels')
makeHeatmap(level2, title = 'Trophic level 2', y.label = 'levels')
n_species = 4
n_resources = 11
names_species = c('A', 'B', 'C', 'D')
#initial species composition
x0 <- rep(1, 4)
#initial media composition
resources <- rep(1.5, 11)
#secretion of C
sec.C <- rdirichlet(1, c(1,1,1))*.5
#The metabolic preferences of A are set to the secretion products of C
pref.A.D <- list(c(sec.C*1000, rep(1,8)))
em.A <- randomE(n_species = 1, n_resources = 11, names_species = 'A', trophic_preferences = pref.A.D, mean_production = 3, mean_consumption = 3)
#secretion of A
sec.A <- abs(em.A*(em.A<0))
#The metabolic preferences of D are set to the secretion products of A
em.D <- randomE(n_species = 1, n_resources = 11, names_species = 'D', trophic_preferences = pref.A.D, mean_production = 3, mean_consumption = 3)
#secretion of D
sec.D <- abs(em.D*(em.D<0))
#The metabolic preferences of B are set to the secretion products of A and D
pref.B <- 1000*((sec.A + sec.D)/(sum(sec.A)+sum(sec.D)))
pref.B[pref.B==0] <- 1
pref.B <- list(pref.B[4:11])
em.B <- randomE(n_species = 1, n_resources = 8, names_species = 'B', trophic_preferences = pref.B, mean_production = 3, mean_consumption = 3)
n_species <- 10
n_resources <- 5
crm_params <- list(n_species = n_species,
n_resources = n_resources,
E = randomE(n_species, n_resources, mean_consumption = 1, mean_production = 3),
resources = rep(1,5),
monod_constant = matrix(rbeta(10*5, 10,10),nrow=10, ncol=5),
inflow_rate = .5,
outflow_rate = .5,
migration_p = 0,
stochastic = FALSE,
t_start = 0,
t_end = 1000,
t_store = 500,
growth_rates = runif(10),
norm=TRUE)
#write the model as an R expression
crm <- parse(text = "do.call(simulateConsumerResource, crm_params)")
#define a resource gradient
resourceGradient <- seq(1, 100,20)
basisComposition <- matrix(0, ncol=10, nrow = 0)
basisResources <- matrix(0, ncol=5, nrow = 0)
for (i in seq_along(resourceGradient)){
crm_params$resources = rep(resourceGradient[i],5)
#generateMoments functions (generates 10 instances of the models and stores the moments and last time point)
crmMoments <- generateMoments(crm, 10, 500, is.resource = TRUE)
basisComposition <-rbind(basisComposition, crmMoments$basisMatrix)
basisResources <-rbind(basisResources, crmMoments$basisResources)
}
getMoments <- function(simulaionMatrix, is.perCapita = FALSE){
simul <- simulaionMatrix
if (is.perCapita){
S = sum(simul[1,])
meanH <- colMeans(simul)
covH <- cov(simul)
m2 = 2*(1/S)*(1/(S-1))*t(apply(covH, 1, cumsum))
diag(m2) <- (1/S)*diag(covH)
return(list(m1 = (1/S)*meanH, m2 = (1/S)*covH, basis = simulaionMatrix))
}
return(list(m1 = colMeans(simul), m2 = cov(simul), basis = simulaionMatrix))
}
generateMoments <- function(modelGenerateExp, n.instances, t.store, is.perCapita=FALSE){
modelMatrix <- eval(modelGenerateExp)$matrix
simul <- modelMatrix[,colnames(modelMatrix)!="time"]
summaryMatrix <- matrix(0, nrow = n.instances, ncol = ncol(simul))
for (i in 1:n.instances){
print(i)
modelMatrix <- eval(modelGenerateExp)$matrix
simul <- modelMatrix[,colnames(modelMatrix)!="time"]
summaryMatrix[i,] <- simul[t.store,]
}
return(getMoments(summaryMatrix, is.perCapita = is.perCapita))
}
n_species <- 10
n_resources <- 5
crm_params <- list(n_species = n_species,
n_resources = n_resources,
E = randomE(n_species, n_resources, mean_consumption = 1, mean_production = 3),
resources = rep(1,5),
monod_constant = matrix(rbeta(10*5, 10,10),nrow=10, ncol=5),
inflow_rate = .5,
outflow_rate = .5,
migration_p = 0,
stochastic = FALSE,
t_start = 0,
t_end = 1000,
t_store = 500,
growth_rates = runif(10),
norm=TRUE)
#write the model as an R expression
crm <- parse(text = "do.call(simulateConsumerResource, crm_params)")
#define a resource gradient
resourceGradient <- seq(1, 100,20)
basisComposition <- matrix(0, ncol=10, nrow = 0)
basisResources <- matrix(0, ncol=5, nrow = 0)
for (i in seq_along(resourceGradient)){
crm_params$resources = rep(resourceGradient[i],5)
#generateMoments functions (generates 10 instances of the models and stores the moments and last time point)
crmMoments <- generateMoments(crm, 10, 500, is.resource = TRUE)
basisComposition <-rbind(basisComposition, crmMoments$basisMatrix)
basisResources <-rbind(basisResources, crmMoments$basisResources)
}
n_species <- 10
n_resources <- 5
crm_params <- list(n_species = n_species,
n_resources = n_resources,
E = randomE(n_species, n_resources, mean_consumption = 1, mean_production = 3),
resources = rep(1,5),
monod_constant = matrix(rbeta(10*5, 10,10),nrow=10, ncol=5),
inflow_rate = .5,
outflow_rate = .5,
migration_p = 0,
stochastic = FALSE,
t_start = 0,
t_end = 1000,
t_store = 500,
growth_rates = runif(10),
norm=TRUE)
#write the model as an R expression
crm <- parse(text = "do.call(simulateConsumerResource, crm_params)")
#define a resource gradient
resourceGradient <- seq(1, 100,20)
basisComposition <- matrix(0, ncol=10, nrow = 0)
basisResources <- matrix(0, ncol=5, nrow = 0)
for (i in seq_along(resourceGradient)){
crm_params$resources = rep(resourceGradient[i],5)
#generateMoments functions (generates 10 instances of the models and stores the moments and last time point)
crmMoments <- generateMoments(crm, 10, 500)
basisComposition <-rbind(basisComposition, crmMoments$basisMatrix)
basisResources <-rbind(basisResources, crmMoments$basisResources)
}
n_species <- 10
n_resources <- 5
crm_params <- list(n_species = n_species,
n_resources = n_resources,
E = randomE(n_species, n_resources, mean_consumption = 1, mean_production = 3),
resources = rep(1,5),
monod_constant = matrix(rbeta(10*5, 10,10),nrow=10, ncol=5),
inflow_rate = .5,
outflow_rate = .5,
migration_p = 0,
stochastic = FALSE,
t_start = 0,
t_end = 1000,
t_store = 500,
growth_rates = runif(10),
norm=TRUE)
#write the model as an R expression
crm <- parse(text = "do.call(simulateConsumerResource, crm_params)")
#define a resource gradient
resourceGradient <- seq(1, 100,20)
basisComposition <- matrix(0, ncol=10, nrow = 0)
basisResources <- matrix(0, ncol=5, nrow = 0)
for (i in seq_along(resourceGradient)){
crm_params$resources = rep(resourceGradient[i],2)
#generateMoments functions (generates 10 instances of the models and stores the moments and last time point)
crmMoments <- generateMoments(crm, 10, 500)
basisComposition <-rbind(basisComposition, crmMoments$basisMatrix)
basisResources <-rbind(basisResources, crmMoments$basisResources)
}
n_species <- 10
n_resources <- 5
crm_params <- list(n_species = n_species,
n_resources = n_resources,
E = randomE(n_species, n_resources, mean_consumption = 1, mean_production = 3),
resources = rep(1,5),
monod_constant = matrix(rbeta(10*5, 10,10),nrow=10, ncol=5),
inflow_rate = .5,
outflow_rate = .5,
migration_p = 0,
stochastic = FALSE,
t_start = 0,
t_end = 1000,
t_store = 500,
growth_rates = runif(10),
norm=TRUE)
#write the model as an R expression
crm <- parse(text = "do.call(simulateConsumerResource, crm_params)")
#define a resource gradient
resourceGradient <- seq(1, 100,3)
basisComposition <- matrix(0, ncol=10, nrow = 0)
basisResources <- matrix(0, ncol=5, nrow = 0)
for (i in seq_along(resourceGradient)){
crm_params$resources = rep(resourceGradient[i],5)
#generateMoments functions (generates 10 instances of the models and stores the moments and last time point)
crmMoments <- generateMoments(crm, 10, 500)
basisComposition <-rbind(basisComposition, crmMoments$basisMatrix)
basisResources <-rbind(basisResources, crmMoments$basisResources)
}
n_species <- 10
n_resources <- 5
crm_params <- list(n_species = n_species,
n_resources = n_resources,
E = randomE(n_species, n_resources, mean_consumption = 1, mean_production = 3),
resources = rep(1,5),
monod_constant = matrix(rbeta(10*5, 10,10),nrow=10, ncol=5),
inflow_rate = .5,
outflow_rate = .5,
migration_p = 0,
stochastic = FALSE,
t_start = 0,
t_end = 1000,
t_store = 500,
growth_rates = runif(10),
norm=TRUE)
#write the model as an R expression
crm <- parse(text = "do.call(simulateConsumerResource, crm_params)")
#define a resource gradient
resourceGradient <- seq(1, 100,20)
basisComposition <- matrix(0, ncol=10, nrow = 0)
basisResources <- matrix(0, ncol=5, nrow = 0)
for (i in seq_along(resourceGradient)){
crm_params$resources = rep(resourceGradient[i],5)
#generateMoments functions (generates 10 instances of the models and stores the moments and last time point)
crmMoments <- generateMoments(crm, 3, 100)
basisComposition <-rbind(basisComposition, crmMoments$basisMatrix)
basisResources <-rbind(basisResources, crmMoments$basisResources)
}
n_species <- 10
n_resources <- 5
crm_params <- list(n_species = n_species,
n_resources = n_resources,
E = randomE(n_species, n_resources, mean_consumption = 1, mean_production = 3),
resources = rep(1,5),
monod_constant = matrix(rbeta(10*5, 10,10),nrow=10, ncol=5),
inflow_rate = .5,
outflow_rate = .5,
migration_p = 0,
stochastic = FALSE,
t_start = 0,
t_end = 1000,
t_store = 500,
growth_rates = runif(10),
norm=TRUE)
#write the model as an R expression
crm <- parse(text = "do.call(simulateConsumerResource, crm_params)")
#define a resource gradient
resourceGradient <- seq(1, 100,5)
basisComposition <- matrix(0, ncol=10, nrow = 0)
basisResources <- matrix(0, ncol=5, nrow = 0)
for (i in seq_along(resourceGradient)){
crm_params$resources = rep(resourceGradient[i],5)
#generateMoments functions (generates 10 instances of the models and stores the moments and last time point)
crmMoments <- generateMoments(crm, 3, 100)
basisComposition <-rbind(basisComposition, crmMoments$basisMatrix)
basisResources <-rbind(basisResources, crmMoments$basisResources)
}
miaSimShiny::run_app()
library(DESeq2)
setwd("C:/Users/danie/OneDrive/Documentos/GitHub/hungerGamesModel/files/strainSummaries/bh/genes")
library("tximport")
library("readr")
library("tximportData")
samples <- read.table("bh_samples_t12vsothers.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('bh_counts.txt',sep="\t",row.names="geneID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds,alpha = 0.05, lfcThreshold = 1.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t12vsothers_deseq.txt", sep='\t')
####################################################
samples <- read.table("bh_samples_t14vsothers.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('bh_counts.txt',sep="\t",row.names="geneID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds,alpha = 0.05, lfcThreshold = 0.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t14vsothers_deseq.txt", sep='\t')
