resourceGradient <- seq(1, 100,20)
basisComposition <- matrix(0, ncol=10, nrow = 0)
basisResources <- matrix(0, ncol=5, nrow = 0)
for (i in seq_along(resourceGradient)){
crm_params$resources = rep(resourceGradient[i],5)
#generateMoments functions (generates 10 instances of the models and stores the moments and last time point)
crmMoments <- generateMoments(crm, 10, 500, is.resource = TRUE)
basisComposition <-rbind(basisComposition, crmMoments$basisMatrix)
basisResources <-rbind(basisResources, crmMoments$basisResources)
}
n_species <- 10
n_resources <- 5
crm_params <- list(n_species = n_species,
n_resources = n_resources,
E = randomE(n_species, n_resources, mean_consumption = 1, mean_production = 3),
resources = rep(1,5),
monod_constant = matrix(rbeta(10*5, 10,10),nrow=10, ncol=5),
inflow_rate = .5,
outflow_rate = .5,
migration_p = 0,
stochastic = FALSE,
t_start = 0,
t_end = 1000,
t_store = 500,
growth_rates = runif(10),
norm=TRUE)
#write the model as an R expression
crm <- parse(text = "do.call(simulateConsumerResource, crm_params)")
#define a resource gradient
resourceGradient <- seq(1, 100,20)
basisComposition <- matrix(0, ncol=10, nrow = 0)
basisResources <- matrix(0, ncol=5, nrow = 0)
for (i in seq_along(resourceGradient)){
crm_params$resources = rep(resourceGradient[i],5)
#generateMoments functions (generates 10 instances of the models and stores the moments and last time point)
crmMoments <- generateMoments(crm, 10, 500)
basisComposition <-rbind(basisComposition, crmMoments$basisMatrix)
basisResources <-rbind(basisResources, crmMoments$basisResources)
}
n_species <- 10
n_resources <- 5
crm_params <- list(n_species = n_species,
n_resources = n_resources,
E = randomE(n_species, n_resources, mean_consumption = 1, mean_production = 3),
resources = rep(1,5),
monod_constant = matrix(rbeta(10*5, 10,10),nrow=10, ncol=5),
inflow_rate = .5,
outflow_rate = .5,
migration_p = 0,
stochastic = FALSE,
t_start = 0,
t_end = 1000,
t_store = 500,
growth_rates = runif(10),
norm=TRUE)
#write the model as an R expression
crm <- parse(text = "do.call(simulateConsumerResource, crm_params)")
#define a resource gradient
resourceGradient <- seq(1, 100,20)
basisComposition <- matrix(0, ncol=10, nrow = 0)
basisResources <- matrix(0, ncol=5, nrow = 0)
for (i in seq_along(resourceGradient)){
crm_params$resources = rep(resourceGradient[i],2)
#generateMoments functions (generates 10 instances of the models and stores the moments and last time point)
crmMoments <- generateMoments(crm, 10, 500)
basisComposition <-rbind(basisComposition, crmMoments$basisMatrix)
basisResources <-rbind(basisResources, crmMoments$basisResources)
}
n_species <- 10
n_resources <- 5
crm_params <- list(n_species = n_species,
n_resources = n_resources,
E = randomE(n_species, n_resources, mean_consumption = 1, mean_production = 3),
resources = rep(1,5),
monod_constant = matrix(rbeta(10*5, 10,10),nrow=10, ncol=5),
inflow_rate = .5,
outflow_rate = .5,
migration_p = 0,
stochastic = FALSE,
t_start = 0,
t_end = 1000,
t_store = 500,
growth_rates = runif(10),
norm=TRUE)
#write the model as an R expression
crm <- parse(text = "do.call(simulateConsumerResource, crm_params)")
#define a resource gradient
resourceGradient <- seq(1, 100,3)
basisComposition <- matrix(0, ncol=10, nrow = 0)
basisResources <- matrix(0, ncol=5, nrow = 0)
for (i in seq_along(resourceGradient)){
crm_params$resources = rep(resourceGradient[i],5)
#generateMoments functions (generates 10 instances of the models and stores the moments and last time point)
crmMoments <- generateMoments(crm, 10, 500)
basisComposition <-rbind(basisComposition, crmMoments$basisMatrix)
basisResources <-rbind(basisResources, crmMoments$basisResources)
}
n_species <- 10
n_resources <- 5
crm_params <- list(n_species = n_species,
n_resources = n_resources,
E = randomE(n_species, n_resources, mean_consumption = 1, mean_production = 3),
resources = rep(1,5),
monod_constant = matrix(rbeta(10*5, 10,10),nrow=10, ncol=5),
inflow_rate = .5,
outflow_rate = .5,
migration_p = 0,
stochastic = FALSE,
t_start = 0,
t_end = 1000,
t_store = 500,
growth_rates = runif(10),
norm=TRUE)
#write the model as an R expression
crm <- parse(text = "do.call(simulateConsumerResource, crm_params)")
#define a resource gradient
resourceGradient <- seq(1, 100,20)
basisComposition <- matrix(0, ncol=10, nrow = 0)
basisResources <- matrix(0, ncol=5, nrow = 0)
for (i in seq_along(resourceGradient)){
crm_params$resources = rep(resourceGradient[i],5)
#generateMoments functions (generates 10 instances of the models and stores the moments and last time point)
crmMoments <- generateMoments(crm, 3, 100)
basisComposition <-rbind(basisComposition, crmMoments$basisMatrix)
basisResources <-rbind(basisResources, crmMoments$basisResources)
}
n_species <- 10
n_resources <- 5
crm_params <- list(n_species = n_species,
n_resources = n_resources,
E = randomE(n_species, n_resources, mean_consumption = 1, mean_production = 3),
resources = rep(1,5),
monod_constant = matrix(rbeta(10*5, 10,10),nrow=10, ncol=5),
inflow_rate = .5,
outflow_rate = .5,
migration_p = 0,
stochastic = FALSE,
t_start = 0,
t_end = 1000,
t_store = 500,
growth_rates = runif(10),
norm=TRUE)
#write the model as an R expression
crm <- parse(text = "do.call(simulateConsumerResource, crm_params)")
#define a resource gradient
resourceGradient <- seq(1, 100,5)
basisComposition <- matrix(0, ncol=10, nrow = 0)
basisResources <- matrix(0, ncol=5, nrow = 0)
for (i in seq_along(resourceGradient)){
crm_params$resources = rep(resourceGradient[i],5)
#generateMoments functions (generates 10 instances of the models and stores the moments and last time point)
crmMoments <- generateMoments(crm, 3, 100)
basisComposition <-rbind(basisComposition, crmMoments$basisMatrix)
basisResources <-rbind(basisResources, crmMoments$basisResources)
}
miaSimShiny::run_app()
library(DESeq2)
setwd("C:/Users/danie/OneDrive/Documentos/GitHub/hungerGamesModel/files/strainSummaries/ri/genes")
library("tximport")
library("readr")
library("tximportData")
samples <- read.table("ri_samples_t04vst12.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('ri_counts_t04vst12.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t04vst12_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("ri_samples_t04vst48.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('ri_counts_t04vst48.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t04vst48_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("ri_samples_t12vst48.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('ri_counts_t12vst48.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t12vst48_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("btri_ri_samples_t12vst36.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('btri_ri_counts_t12vst36.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="btri_ri_t12vst36_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("btri_ri_samples_t12t48vst12t24t36.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('btri_ri_counts_t12t48vst12t24t36.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="btri__ri_t12t48vst12t24t36_deseq.txt", sep='\t')
library(DESeq2)
setwd("C:/Users/danie/OneDrive/Documentos/GitHub/hungerGamesModel/files/strainSummaries/ri/genes")
library("tximport")
library("readr")
library("tximportData")
samples <- read.table("ri_samples_t04vst12.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('ri_counts_t04vst12.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 0.5)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t04vst12_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("ri_samples_t04vst48.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('ri_counts_t04vst48.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 0.5)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t04vst48_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("ri_samples_t12vst48.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('ri_counts_t12vst48.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 0.5)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t12vst48_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("btri_ri_samples_t12vst36.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('btri_ri_counts_t12vst36.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 0.5)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="btri_ri_t12vst36_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("btri_ri_samples_t12t48vst12t24t36.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('btri_ri_counts_t12t48vst12t24t36.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 0.5)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="btri__ri_t12t48vst12t24t36_deseq.txt", sep='\t')
library(DESeq2)
setwd("C:/Users/danie/OneDrive/Documentos/GitHub/hungerGamesModel/files/strainSummaries/ri/genes")
library("tximport")
library("readr")
library("tximportData")
samples <- read.table("ri_samples_t04vst12.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('ri_counts_t04vst12.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.5)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t04vst12_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("ri_samples_t04vst48.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('ri_counts_t04vst48.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.5)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t04vst48_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("ri_samples_t12vst48.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('ri_counts_t12vst48.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.5)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t12vst48_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("btri_ri_samples_t12vst36.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('btri_ri_counts_t12vst36.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.5)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="btri_ri_t12vst36_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("btri_ri_samples_t12t48vst12t24t36.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('btri_ri_counts_t12t48vst12t24t36.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.5)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="btri__ri_t12t48vst12t24t36_deseq.txt", sep='\t')
library(DESeq2)
setwd("C:/Users/danie/OneDrive/Documentos/GitHub/hungerGamesModel/files/strainSummaries/bh/genes")
library("tximport")
library("readr")
library("tximportData")
samples <- read.table("bh_samples_t14vst32.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('bh_counts_t14vst32.txt',sep="\t",row.names="geneID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t14vst32_deseq.txt", sep='\t')
samples <- read.table("bh_samples_t14vst72.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('bh_counts_t14vst72.txt',sep="\t",row.names="geneID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds,alpha = 0.05, lfcThreshold = 1.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t14vst72_deseq.txt", sep='\t')
samples <- read.table("bh_samples_t32vst72.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('bh_counts_t32vst72.txt',sep="\t",row.names="geneID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds,alpha = 0.05, lfcThreshold = 1.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t32vst72_deseq.txt", sep='\t')
library(DESeq2)
setwd("C:/Users/danie/OneDrive/Documentos/GitHub/hungerGamesModel/files/strainSummaries/ri/genes")
library("tximport")
library("readr")
library("tximportData")
samples <- read.table("ri_samples_t04vst12.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('ri_counts_t04vst12.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t04vst12_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("ri_samples_t04vst48.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('ri_counts_t04vst48.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t04vst48_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("ri_samples_t12vst48.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('ri_counts_t12vst48.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="t12vst48_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("btri_ri_samples_t12vst36.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('btri_ri_counts_t12vst36.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="btri_ri_t12vst36_deseq.txt", sep='\t')
#############################################################################
samples <- read.table("btri_ri_samples_t12t48vst12t24t36.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('btri_ri_counts_t12t48vst12t24t36.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="btri__ri_t12t48vst12t24t36_deseq.txt", sep='\t')
samples <- read.table("ri_samples_t12vsbtri_ri_t12.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('ri_samples_t12vsbtri_ri_t12.txt',sep="\t",row.names="patricID"))
samples <- read.table("ri_samples_t12vsbtri_ri_t12.txt", header=TRUE, row.names = 1)
samples$condition <- factor(samples$condition)
cts <- as.matrix(read.csv('ri_counts_t12vsbtri_ri_t12.txt',sep="\t",row.names="patricID"))
all(rownames(samples) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = round(cts),
colData = samples,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds, ,alpha = 0.05, lfcThreshold = 1.0)
dds <- estimateSizeFactors(dds)
counts.norm <- counts(dds, normalized = T)
write.table(as.data.frame(res),
file="ri_t12vsbtri_ri_t12_deseq.txt", sep='\t')
